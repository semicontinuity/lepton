/* The following code was generated by JFlex 1.4.3 on 14.6.11 9:20 */

package neutrino.idea.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.6.11 9:20 from the specification file
 * <tt>P:/projects/beanbox/trunk/plugin/src/literator/idea/parsing/Literal.flex</tt>
 */
class _LiteralLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\0"+
    "\1\24\1\51\1\6\2\0\1\25\1\37\1\40\1\5\1\54\1\47"+
    "\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\45\1\46"+
    "\1\53\1\0\1\52\1\0\1\50\3\14\1\55\1\22\1\20\5\6"+
    "\1\12\13\6\1\13\2\6\1\43\1\26\1\44\1\0\1\6\1\0"+
    "\1\34\2\14\1\55\1\32\1\33\5\6\1\35\5\6\1\30\1\36"+
    "\1\27\1\31\2\6\1\13\2\6\1\41\1\0\1\42\1\0\41\7"+
    "\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6"+
    "\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6"+
    "\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6"+
    "\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6"+
    "\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6"+
    "\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6"+
    "\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7"+
    "\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0"+
    "\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7"+
    "\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6"+
    "\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0"+
    "\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0"+
    "\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"+
    "\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0"+
    "\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0"+
    "\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0"+
    "\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0"+
    "\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0"+
    "\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0"+
    "\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7"+
    "\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0"+
    "\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0"+
    "\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6"+
    "\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6"+
    "\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6"+
    "\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6"+
    "\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0"+
    "\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0"+
    "\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0"+
    "\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0"+
    "\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0"+
    "\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0"+
    "\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6"+
    "\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6"+
    "\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7"+
    "\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\2\4\1\5\1\6"+
    "\1\7\1\10\2\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\0\1\4\1\30\1\31\1\0\3\4"+
    "\1\32\1\30\1\0\1\30\2\7\2\10\2\3\2\27"+
    "\1\0\4\4\1\30\1\0\2\3\1\33\3\4\1\34"+
    "\22\4\1\0\2\4\1\0\2\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\1\0\2\4\1\0\1\4\1\30"+
    "\1\0\5\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\134\0\270\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\134\0\u019e\0\u01cc\0\u01fa\0\u0228\0\134"+
    "\0\134\0\134\0\134\0\134\0\134\0\134\0\134\0\134"+
    "\0\134\0\134\0\134\0\134\0\134\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\134\0\u030e\0\u033c\0\u036a\0\u0398\0\134\0\u03c6"+
    "\0\u03f4\0\134\0\134\0\u0422\0\134\0\u0450\0\u047e\0\u04ac"+
    "\0\u04da\0\134\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\u061c\0\u064a\0\u0678\0\134\0\u06a6\0\u06d4\0\u0702\0\346"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\3\1\10"+
    "\1\11\3\7\3\11\1\7\1\12\1\7\1\13\1\14"+
    "\1\15\1\3\1\16\3\7\1\17\3\7\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\7\56\3\60\0\1\5"+
    "\57\0\1\36\1\37\56\0\13\7\1\0\1\7\4\0"+
    "\10\7\16\0\1\7\10\0\1\40\1\41\1\42\1\43"+
    "\1\0\1\44\1\45\1\46\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\11"+
    "\1\42\2\0\3\11\1\47\1\50\1\51\7\0\1\51"+
    "\1\47\1\0\1\42\17\0\1\52\10\0\2\50\3\0"+
    "\3\50\36\0\1\14\2\0\21\14\1\53\1\14\1\54"+
    "\27\14\1\15\2\0\22\15\1\55\1\56\27\15\6\0"+
    "\13\7\1\0\1\7\4\0\1\7\1\57\6\7\16\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\5\7\1\60"+
    "\2\7\16\0\1\7\1\36\1\61\1\62\53\36\5\37"+
    "\1\63\50\37\10\0\1\40\1\41\1\42\2\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\7\0\1\51\1\47"+
    "\1\0\1\42\17\0\1\52\10\0\2\41\3\0\3\41"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\21\0\1\52"+
    "\10\0\1\64\1\65\2\0\5\65\1\0\1\65\7\0"+
    "\3\65\20\0\1\65\10\0\1\66\1\41\1\42\2\0"+
    "\3\66\1\47\1\50\1\51\7\0\1\51\1\47\1\0"+
    "\1\42\17\0\1\52\10\0\1\46\1\41\1\42\2\0"+
    "\3\46\1\47\1\50\1\51\7\0\1\51\1\47\1\0"+
    "\1\42\17\0\1\52\10\0\1\67\1\41\1\42\2\0"+
    "\3\67\1\47\1\50\1\51\7\0\1\51\1\47\1\0"+
    "\1\42\17\0\1\52\10\0\2\50\3\0\3\50\1\47"+
    "\1\0\1\51\7\0\1\51\1\47\21\0\1\52\10\0"+
    "\2\70\3\0\3\70\3\0\1\71\30\0\1\71\1\0"+
    "\1\14\2\0\53\14\1\15\2\0\53\15\6\0\13\7"+
    "\1\0\1\7\4\0\2\7\1\72\5\7\16\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\6\7\1\73\1\7"+
    "\16\0\1\7\2\0\1\62\53\0\4\37\1\74\1\63"+
    "\50\37\10\0\1\64\1\65\1\42\1\0\5\65\1\0"+
    "\1\65\7\0\3\65\1\42\17\0\1\65\10\0\2\75"+
    "\1\42\1\0\5\75\1\0\1\75\7\0\3\75\1\42"+
    "\17\0\1\75\10\0\1\76\1\41\1\42\2\0\3\76"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\1\77\1\41\1\42\2\0\3\77"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\2\70\3\0\3\70\1\47\12\0"+
    "\1\47\21\0\1\52\10\0\2\70\3\0\3\70\44\0"+
    "\13\7\1\0\1\7\4\0\3\7\1\100\4\7\16\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\7\7\1\72"+
    "\16\0\1\7\10\0\2\101\1\42\1\0\5\101\1\0"+
    "\1\101\7\0\3\101\1\42\17\0\1\101\10\0\1\102"+
    "\1\41\1\42\2\0\3\102\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\103"+
    "\1\41\1\42\2\0\3\103\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\104"+
    "\1\42\1\0\5\104\1\0\1\104\7\0\3\104\1\42"+
    "\17\0\1\104\10\0\1\105\1\41\1\42\2\0\3\105"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\1\106\1\41\1\42\2\0\3\106"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\2\107\1\42\1\0\5\107\1\0"+
    "\1\107\7\0\3\107\1\42\17\0\1\107\10\0\1\110"+
    "\1\41\1\42\2\0\3\110\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\111"+
    "\1\41\1\42\2\0\3\111\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\112"+
    "\1\42\1\0\5\112\1\0\1\112\7\0\3\112\1\42"+
    "\17\0\1\112\10\0\1\113\1\41\1\42\2\0\3\113"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\1\114\1\41\1\42\2\0\3\114"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\2\115\1\42\1\0\5\115\1\0"+
    "\1\115\7\0\3\115\1\42\17\0\1\115\10\0\1\116"+
    "\1\41\1\42\2\0\3\116\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\117"+
    "\1\41\1\42\2\0\3\117\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\120"+
    "\1\42\1\0\5\120\1\0\1\120\7\0\3\120\1\42"+
    "\17\0\1\120\10\0\1\121\1\41\1\42\2\0\3\121"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\1\122\1\41\1\42\2\0\3\122"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\2\123\1\42\1\0\5\123\1\0"+
    "\1\123\7\0\3\123\1\42\17\0\1\123\10\0\1\124"+
    "\1\41\1\42\2\0\3\124\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\125"+
    "\1\41\1\42\2\0\3\125\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\126"+
    "\1\42\1\0\5\126\1\0\1\126\7\0\3\126\1\42"+
    "\17\0\1\126\10\0\1\127\1\41\1\42\2\0\3\127"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\1\130\1\41\1\42\2\0\3\130"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\2\131\1\42\1\0\5\131\1\0"+
    "\1\131\7\0\3\131\1\42\17\0\1\131\10\0\1\132"+
    "\1\41\1\42\2\0\3\132\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\133"+
    "\1\41\1\42\2\0\3\133\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\134"+
    "\1\42\1\0\5\134\1\0\1\134\7\0\3\134\1\42"+
    "\17\0\1\134\10\0\1\135\1\41\1\42\2\0\3\135"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\1\136\1\41\1\42\2\0\3\136"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\2\137\1\42\1\0\5\137\1\0"+
    "\1\137\7\0\3\137\1\42\17\0\1\137\10\0\1\140"+
    "\1\41\1\42\2\0\3\140\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\141"+
    "\1\41\1\42\2\0\3\141\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\142"+
    "\1\42\1\0\5\142\1\0\1\142\7\0\3\142\1\42"+
    "\17\0\1\142\10\0\1\143\1\41\1\42\2\0\3\143"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\1\144\1\41\1\42\2\0\3\144"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\10\0\2\145\1\42\1\0\5\145\1\0"+
    "\1\145\7\0\3\145\1\42\17\0\1\145\10\0\1\146"+
    "\1\41\1\42\2\0\3\146\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\147"+
    "\1\41\1\42\2\0\3\147\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\150"+
    "\1\42\1\0\5\150\1\0\1\150\7\0\3\150\1\42"+
    "\17\0\1\150\10\0\1\151\1\41\1\42\2\0\3\151"+
    "\1\47\1\50\1\51\7\0\1\51\1\47\1\0\1\42"+
    "\17\0\1\52\12\0\1\42\22\0\1\42\30\0\1\152"+
    "\1\41\1\42\2\0\3\152\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\153"+
    "\1\41\1\42\2\0\3\153\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\154"+
    "\1\41\1\42\2\0\3\154\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\1\155"+
    "\1\41\1\42\2\0\3\155\1\47\1\50\1\51\7\0"+
    "\1\51\1\47\1\0\1\42\17\0\1\52\10\0\2\41"+
    "\1\42\2\0\3\41\1\47\1\50\1\51\7\0\1\51"+
    "\1\47\1\0\1\42\17\0\1\52";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3864];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\5\1\1\11\4\1\16\11"+
    "\1\1\1\0\2\1\1\11\1\0\3\1\1\11\1\1"+
    "\1\0\2\11\1\1\1\11\4\1\1\11\1\0\5\1"+
    "\1\0\2\1\1\11\26\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _LiteralLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _LiteralLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1758) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return LiteralTokenTypes.LONG_LITERAL;
          }
        case 29: break;
        case 16: 
          { return LiteralTokenTypes.SEMICOLON;
          }
        case 30: break;
        case 28: 
          { return LiteralTokenTypes.BOOLEAN_LITERAL;
          }
        case 31: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 32: break;
        case 12: 
          { return LiteralTokenTypes.RBRACE;
          }
        case 33: break;
        case 17: 
          { return LiteralTokenTypes.COMMA;
          }
        case 34: break;
        case 14: 
          { return LiteralTokenTypes.RBRACK;
          }
        case 35: break;
        case 7: 
          { return neutrino.idea.parsing.LiteralElementTypes.STRING_LITERAL;
          }
        case 36: break;
        case 2: 
          { return LiteralTokenTypes.WHITE_SPACE;
          }
        case 37: break;
        case 27: 
          { return LiteralTokenTypes.BLOCK_COMMENT;
          }
        case 38: break;
        case 24: 
          { return LiteralTokenTypes.DOUBLE_LITERAL;
          }
        case 39: break;
        case 18: 
          { return LiteralTokenTypes.AT;
          }
        case 40: break;
        case 23: 
          { return LiteralTokenTypes.END_OF_LINE_COMMENT;
          }
        case 41: break;
        case 3: 
          { return LiteralTokenTypes.IDENTIFIER;
          }
        case 42: break;
        case 21: 
          { return LiteralTokenTypes.LT;
          }
        case 43: break;
        case 6: 
          { return LiteralTokenTypes.MINUS;
          }
        case 44: break;
        case 26: 
          { return LiteralTokenTypes.FLOAT_LITERAL;
          }
        case 45: break;
        case 22: 
          { return LiteralTokenTypes.PLUS;
          }
        case 46: break;
        case 11: 
          { return LiteralTokenTypes.LBRACE;
          }
        case 47: break;
        case 4: 
          { return LiteralTokenTypes.INTEGER_LITERAL;
          }
        case 48: break;
        case 9: 
          { return LiteralTokenTypes.LPAREN;
          }
        case 49: break;
        case 5: 
          { return LiteralTokenTypes.DOT;
          }
        case 50: break;
        case 13: 
          { return LiteralTokenTypes.LBRACK;
          }
        case 51: break;
        case 15: 
          { return LiteralTokenTypes.COLON;
          }
        case 52: break;
        case 19: 
          { return LiteralTokenTypes.POUND;
          }
        case 53: break;
        case 10: 
          { return LiteralTokenTypes.RPAREN;
          }
        case 54: break;
        case 20: 
          { return LiteralTokenTypes.GT;
          }
        case 55: break;
        case 8: 
          { return neutrino.idea.parsing.LiteralElementTypes.CHAR_LITERAL;
          }
        case 56: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
